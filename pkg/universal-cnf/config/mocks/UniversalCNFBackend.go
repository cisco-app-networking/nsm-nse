// Code generated by mockery v1.0.0. DO NOT EDIT.

// README: This file is generated by mockery.
// For more information, please check https://github.com/vektra/mockery
//
// Tips for using mockery:
// 	1. Install: go get github.com/vektra/mockery/v2/.../
// 	2. Run: mockery --name=UniversalCNFBackend (UniversalCNFBackend is the interface I wish to mock)
//	3. After runnig the above command, a mock file will be auto-generated at mocks/UniversalCNFBackend.go

package mocks

import (
	connection "github.com/networkservicemesh/networkservicemesh/controlplane/api/connection"
	mock "github.com/stretchr/testify/mock"

	vpp "go.ligato.io/vpp-agent/v3/proto/ligato/vpp"
)

// UniversalCNFBackend is an autogenerated mock type for the UniversalCNFBackend type
type UniversalCNFBackend struct {
	mock.Mock
}

// NewDPConfig provides a mock function with given fields:
func (_m *UniversalCNFBackend) NewDPConfig() *vpp.ConfigData {
	// ret := _m.Called()

	// var r0 *vpp.ConfigData
	// if rf, ok := ret.Get(0).(func() *vpp.ConfigData); ok {
	// 	r0 = rf()
	// } else {
	// 	if ret.Get(0) != nil {
	// 		r0 = ret.Get(0).(*vpp.ConfigData)
	// 	}
	// }
	// return r0

	return &vpp.ConfigData{}
}

// NewUniversalCNFBackend provides a mock function with given fields:
func (_m *UniversalCNFBackend) NewUniversalCNFBackend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessClient provides a mock function with given fields: dpconfig, ifName, conn
func (_m *UniversalCNFBackend) ProcessClient(dpconfig interface{}, ifName string, conn *connection.Connection) error {
	ret := _m.Called(dpconfig, ifName, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, *connection.Connection) error); ok {
		r0 = rf(dpconfig, ifName, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessDPConfig provides a mock function with given fields: dpconfig, update
func (_m *UniversalCNFBackend) ProcessDPConfig(dpconfig interface{}, update bool) error {
	ret := _m.Called(dpconfig, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, bool) error); ok {
		r0 = rf(dpconfig, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessEndpoint provides a mock function with given fields: dpconfig, serviceName, ifName, conn
func (_m *UniversalCNFBackend) ProcessEndpoint(dpconfig interface{}, serviceName string, ifName string, conn *connection.Connection) error {
	ret := _m.Called(dpconfig, serviceName, ifName, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, *connection.Connection) error); ok {
		r0 = rf(dpconfig, serviceName, ifName, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
