version: 2.1

# Docker environment.
defaults: &defaults
  working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
  docker:
    - image: ciscoappnetworking/kubectl_kind:kubectl.v1.17.5-kind.v0.7.0-helm.v3.3.4
  environment:
    GOPATH: /go
    ORG: ciscoappnetworking

defaults-machine: &defaults-machine
  machine: # executor type
      image: ubuntu-1604:201903-01
  working_directory: ~/go/src/github.com/cisco-app-networking/nsm-nse
  environment:
    GOPATH: ~/go
    ORG: ciscoappnetworking

# Golang testing environment.
defaults-go-tester: &defaults-go-tester
  working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
  docker:
    - image: cimg/go:1.13
  environment:
    GOPATH: ~/go
    ORG: ciscoappnetworking


commands:
  publish-steps:
    parameters:
      tag:
        type: string
        default: ${CIRCLE_BRANCH}
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /go/src/_save
      - run:
          name: Restore the built images
          command: |
            docker load --input /go/src/_save/images.tar
      - run:
          name: Tag and publish the images
          command: |
            export TAG=<< parameters.tag >>
            echo "Tag for images: ${TAG}"
            TAGSUFFIX=$(date +%Y%m%d)
            PUB_ORG=${DOCKER_ORG:-$DOCKER_USER}
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
            for image in "vl3_ucnf-nse" "ucnf-kiknos-vppagent"; do
              docker tag ${ORG}/${image}:${CIRCLE_SHA1} ${PUB_ORG}/${image}:${TAG}
              docker push ${PUB_ORG}/${image}:${TAG}
              docker tag ${ORG}/${image}:${CIRCLE_SHA1} ${PUB_ORG}/${image}:${TAG}-${TAGSUFFIX}
              docker push ${PUB_ORG}/${image}:${TAG}-${TAGSUFFIX}
            done


e2e-kind-test: &e2e-kind-test
  steps:
    - setup_remote_docker
    - checkout:
        path: /go/src/github.com/cisco-app-networking/nsm-nse
    - attach_workspace:
        at: /go/src/_save
    - run:
        name: Start KinD Clusters
        command: |
          kind create cluster --name kind1
          kind create cluster --name kind2
    - run:
        name: Get KinD cluster info
        working_directory: /go/src/github.com/cisco-app-networking/nsm-nse/build/ci/runner
        command: |
          mkdir kubeconfigs
          kind get kubeconfig --name=kind1 > kubeconfigs/kind1.kubeconfig
          kind get kubeconfig --name=kind2 > kubeconfigs/kind2.kubeconfig
    - run:
        name: Restore built images
        command: |
          for cluster in kind1 kind2; do
            kind load image-archive --name $cluster /go/src/_save/images.tar
          done
    - run:
        name: Build vl3 runner container
        working_directory: /go/src/github.com/cisco-app-networking/nsm-nse/build/ci/runner
        command: |
          docker build --build-arg vl3_repo=https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git --build-arg vl3_branch=${CIRCLE_SHA1:-master} --build-arg nsm_branch=v0.2.3-vl3 -t vl3-runner:latest -f Dockerfile.runner .
    - run:
        name: Start common runner container
        command: |
          docker run -d --rm -v /var/run/docker.sock:/var/run/docker.sock --name=vl3-run --network=host vl3-runner:latest bash -c "while [[ 1 ]]; do sleep 900; done"
    - run:
        name: Run vl3 test
        command: |
          docker exec -e NSE_HUB=${ORG} -e NSE_TAG=${CIRCLE_SHA1} -t vl3-run bash -c "/go/run_vl3.sh"
    - run:
        name: Dump KinD Cluster state
        when: always
        command: |
          docker exec -t vl3-run bash -c "git clone https://github.com/astralkn/k8s-logs-extractor.git && cd k8s-logs-extractor && go run . --kc=/etc/kubeconfigs --o=/logs"
    - run:
        name: Dump vl3 dataplane state
        when: always
        command: |
          docker exec -t vl3-run bash -c "/go/src/github.com/cisco-app-networking/nsm-nse/scripts/vl3/check_vl3_dataplane.sh --kconf_clus1=/etc/kubeconfigs/kind1.kubeconfig --kconf_clus2=/etc/kubeconfigs/kind2.kubeconfig &> /logs/vl3_dataplane_dump.txt"
    - run:
        name: Store logs results
        when: always
        command: |
          mkdir -p /tmp/cluster_state
          docker cp vl3-run:/logs/. /tmp/cluster_state/
    - store_artifacts:
        path: /tmp/cluster_state

e2e-kind-kiknos-test: &e2e-kind-kiknos-test
  steps:
    - checkout:
        path: ~/go/src/github.com/cisco-app-networking/nsm-nse
    - attach_workspace:
        at: ~/go/src/_save
    #- run:
    #    name: Run Kiknos-test
    #    working_directory: ~/go/src/github.com/cisco-app-networking/nsm-nse
    #    command: |
    #      make deploy-kiknos-clients CLUSTER=kiknos-demo-1
    #      make deploy-kiknos-start-vpn BUILD_IMAGE=true DEPLOY_ISTIO=false CLUSTER=kiknos-demo-2 CLUSTER_REF=kiknos-demo-1

    - run:
        name: Build runner container
        working_directory: ~/go/src/github.com/cisco-app-networking/nsm-nse
        command: |
          docker build -t kiknos-runner:latest -f build/nse/ucnf-kiknos/Dockerfile.runner .

    - run:
        name: Start common runner container
        command: |
          docker run -d --rm -v /var/run/docker.sock:/var/run/docker.sock --name=kiknos-run --network=host -e GOPATH=/go kiknos-runner:latest bash -c "while [[ 1 ]]; do sleep 900; done"

    - run:
        name: deploy kiknos in cluster 1
        command: |
          docker exec -t kiknos-run bash -c "cd /go/src/github.com/cisco-app-networking/nsm-nse; make deploy-kiknos-clients PROVISION_MODE=kind-load CLUSTER=kiknos-demo-1"

    - run:
        name: deploy & test kiknos
        command: |
          docker exec -t kiknos-run bash -c "cd /go/src/github.com/cisco-app-networking/nsm-nse; make deploy-kiknos-start-vpn PROVISION_MODE=kind-load BUILD_IMAGE=true DEPLOY_ISTIO=false CLUSTER=kiknos-demo-2 CLUSTER_REF=kiknos-demo-1"

    - run:
        name: Dump KinD Cluster state
        when: always
        command: |
          docker exec -t kiknos-run bash -c "mkdir -p \$HOME/kubeconfigs"
          docker exec -t kiknos-run bash -c "kind get kubeconfig --name=kiknos-demo-1 > \$HOME/kubeconfigs/kiknos-demo-1.kubeconfig"
          docker exec -t kiknos-run bash -c "kind get kubeconfig --name=kiknos-demo-2 > \$HOME/kubeconfigs/kiknos-demo-2.kubeconfig"
          docker exec -t kiknos-run bash -c "git clone https://github.com/astralkn/k8s-logs-extractor.git && cd k8s-logs-extractor && go run . --kc=\$HOME/kubeconfigs --o=/logs"

    - run:
        name: Store logs results
        when: always
        command: |
          mkdir -p /tmp/cluster_state
          docker cp kiknos-run:/logs/. /tmp/cluster_state/

    - store_artifacts:
        path: /tmp/cluster_state

run-all-go-tests: &run-all-go-tests
  steps:
    - checkout:
        path: ~/go/src/github.com/cisco-app-networking/nsm-nse
    - run:
        name: Run all go unit tests
        working_directory: ~/go/src/github.com/cisco-app-networking/nsm-nse/
        # runs all the go test recursively
        command: |
          go test ./...


jobs:
  build-NSEs:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build vL3 docker image
          working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
          command: |
            ORG=${ORG} TAG=${CIRCLE_SHA1} make docker-vl3
      - run:
          name: Build ucnf-kiknos docker image
          working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
          command: |
            ORG=${ORG} TAG=${CIRCLE_SHA1} make docker-ucnf-kiknos-vppagent-build
      - run:
          name: Save docker images
          working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
          command: |
            images_to_save+=("${ORG}/vl3_ucnf-nse:${CIRCLE_SHA1}" "${ORG}/ucnf-kiknos-vppagent:${CIRCLE_SHA1}")
            mkdir -p _save
            docker save "${images_to_save[@]}" >_save/images.tar
      - persist_to_workspace:
          root: _save
          paths:
          - images.tar

  e2e-kind-integration:
    <<: *defaults
    <<: *e2e-kind-test

  e2e-kiknos-integration:
    <<: *defaults-machine
    <<: *e2e-kind-kiknos-test

  publish-NSEs:
    <<: *defaults
    steps:
      - publish-steps

  publish-tagged-images:
    <<: *defaults
    steps:
      - publish-steps:
          tag: ${CIRCLE_TAG}

  go-test-integration:
    <<: *defaults-go-tester
    <<: *run-all-go-tests


orbs:
  helm: circleci/helm@0.2.1
workflows:
  version: 2
  test-and-push:
    jobs:
      - build-NSEs
      - e2e-kind-integration:
          requires:
            - build-NSEs
      - e2e-kiknos-integration:
          requires:
            - build-NSEs
      - publish-NSEs:
          context: nse-publish
          requires:
            - e2e-kind-integration
            - e2e-kiknos-integration
          filters:
            branches:
              only:
                - master
                - /release.*/
      - go-test-integration
  test-and-push-tagged:
    jobs:
      - build-NSEs:
          filters:
            branches:
              ignore: /.*/ # will run only for git tagged commits
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-vl3/
      - e2e-kind-integration:
          requires:
            - build-NSEs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-vl3/
      - e2e-kiknos-integration:
          requires:
            - build-NSEs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-vl3/
      - publish-tagged-images:
          context: nse-publish
          requires:
            - e2e-kind-integration
            - e2e-kiknos-integration
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-vl3/
      - go-test-integration:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-vl3/

