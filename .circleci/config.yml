version: 2.1

# Docker environment.
defaults: &defaults
  working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
  docker:
    - image: tiswanso/kubectl_kind:latest
  environment:
    GOPATH: /go
    ORG: tiswanso

defaults-machine: &defaults-machine
  machine: # executor type
      image: ubuntu-1604:201903-01
  working_directory: ~/go/src/github.com/cisco-app-networking/nsm-nse
  environment:
    GOPATH: ~/go
    ORG: tiswanso

e2e-kind-test: &e2e-kind-test
  steps:
    - setup_remote_docker
    - checkout:
        path: /go/src/github.com/cisco-app-networking/nsm-nse
    - run:
        name: Clone networkservicemesh
        working_directory: /go/src/github.com/networkservicemesh
        command: |
          git clone https://github.com/networkservicemesh/networkservicemesh.git
    - attach_workspace:
        at: /go/src/_save
    - run:
        name: Start KinD Clusters
        command: |
          kind create cluster --name kind1
          kind create cluster --name kind2
    - run:
        name: Get KinD cluster info
        working_directory: /go/src/github.com/cisco-app-networking/nsm-nse/build/ci/runner
        command: |
          mkdir kubeconfigs
          kind get kubeconfig --name=kind1 > kubeconfigs/kind1.kubeconfig
          kind get kubeconfig --name=kind2 > kubeconfigs/kind2.kubeconfig

    - run:
        name: Restore built images
        command: |
          for cluster in kind1 kind2; do
            kind load image-archive --name $cluster /go/src/_save/images.tar
          done

    - run:
        name: Build vl3 runner container
        working_directory: /go/src/github.com/cisco-app-networking/nsm-nse/build/ci/runner
        command: |
          docker build --build-arg vl3_branch=${CIRCLE_SHA1:-master} --build-arg nsm_branch=v0.2.0-vl3 -t vl3-runner:latest -f Dockerfile.runner .

    - run:
        name: Run vl3 test
        command: |
          docker run --name=vl3-run --network=host -t -e VL3_IMGTAG=${CIRCLE_SHA1} vl3-runner:latest /go/run_vl3.sh

    - run:
        name: Dump vL3 interdomain state
        when: always
        command: |
          mkdir -p /tmp/cluster_state
          docker run --name=vl3-dataplane-dump --network=host -t vl3-runner:latest bash -c "/go/src/github.com/cisco-app-networking/nsm-nse/scripts/vl3/check_vl3_dataplane.sh --kconf_clus1=/etc/kubeconfigs/kind1.kubeconfig --kconf_clus2=/etc/kubeconfigs/kind2.kubeconfig"
          docker logs vl3-dataplane-dump > /tmp/cluster_state/vl3_dataplane_dump.txt
          docker run --name=vl3-logk1-dump --network=host -t vl3-runner:latest bash -c "kubectl logs deployment/vl3-nse-ucnf --kubeconfig /etc/kubeconfigs/kind1.kubeconfig"
          docker logs vl3-logk1-dump > /tmp/cluster_state/vl3_log_dump_kind1.txt
          docker run --name=vl3-logcm1-dump --network=host -t vl3-runner:latest bash -c "kubectl get configmap ucnf-vl3-ucnf -o yaml --kubeconfig /etc/kubeconfigs/kind1.kubeconfig"
          docker logs vl3-logcm1-dump >> /tmp/cluster_state/vl3_log_dump_kind1.txt
          docker run --name=vl3-logk2-dump --network=host -t vl3-runner:latest bash -c "kubectl logs deployment/vl3-nse-ucnf --kubeconfig /etc/kubeconfigs/kind2.kubeconfig"
          docker logs vl3-logk2-dump > /tmp/cluster_state/vl3_log_dump_kind2.txt
          docker run --name=vl3-logcm2-dump --network=host -t vl3-runner:latest bash -c "kubectl get configmap ucnf-vl3-ucnf -o yaml --kubeconfig /etc/kubeconfigs/kind2.kubeconfig"
          docker logs vl3-logcm2-dump >> /tmp/cluster_state/vl3_log_dump_kind2.txt

    - store_artifacts:
        path: /tmp/cluster_state

e2e-kind-kiknos-test: &e2e-kind-kiknos-test
  steps:
    - checkout:
        path: ~/go/src/github.com/cisco-app-networking/nsm-nse
    - run:
        name: Clone networkservicemesh
        working_directory: ~/go/src/github.com/networkservicemesh
        command: |
          git clone https://github.com/networkservicemesh/networkservicemesh.git
    - attach_workspace:
        at: ~/go/src/_save
    #- run:
    #    name: Run Kiknos-test
    #    working_directory: ~/go/src/github.com/cisco-app-networking/nsm-nse
    #    command: |
    #      make deploy-kiknos-clients CLUSTER=kiknos-demo-1
    #      make deploy-kiknos-start-vpn BUILD_IMAGE=true DEPLOY_ISTIO=false CLUSTER=kiknos-demo-2 CLUSTER_REF=kiknos-demo-1

    - run:
        name: Build runner container
        working_directory: ~/go/src/github.com/cisco-app-networking/nsm-nse
        command: |
          docker build --build-arg vl3_branch=${CIRCLE_SHA1:-master} --build-arg nsm_branch=v0.2.0-vl3 -t kiknos-runner:latest -f build/nse/ucnf-kiknos/Dockerfile.runner .

    - run:
        name: Start common runner container
        command: |
          docker run -d --rm -v /var/run/docker.sock:/var/run/docker.sock --name=kiknos-run --network=host -e GOPATH=/go kiknos-runner:latest bash -c "while [[ 1 ]]; do sleep 900; done"

    - run:
        name: deploy kiknos in cluster 1
        command: |
          docker exec -t kiknos-run bash -c "cd /go/src/github.com/cisco-app-networking/nsm-nse; make deploy-kiknos-clients PROVISION_MODE=kind-load CLUSTER=kiknos-demo-1"

    - run:
        name: deploy & test kiknos
        command: |
          docker exec -t kiknos-run bash -c "cd /go/src/github.com/cisco-app-networking/nsm-nse; make deploy-kiknos-start-vpn PROVISION_MODE=kind-load BUILD_IMAGE=true DEPLOY_ISTIO=false CLUSTER=kiknos-demo-2 CLUSTER_REF=kiknos-demo-1"

publish-steps: &publish-steps
  steps:
    - checkout
    - setup_remote_docker
    - attach_workspace:
        at: /go/src/_save
    - run:
        name: Restore the built images
        command: |
          docker load --input /go/src/_save/images.tar
    - run:
        name: Tag and publish the images
        command: |
          TAGSUFFIX=$(date +%Y%m%d)
          docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
          for image in "vl3_ucnf-nse" "ucnf-kiknos-vppagent"; do
              docker tag ${ORG}/${image}:${CIRCLE_SHA1} ${DOCKER_USER}/${image}:${CIRCLE_BRANCH}
              docker push ${DOCKER_USER}/${image}:${CIRCLE_BRANCH}
              docker tag ${ORG}/${image}:${CIRCLE_SHA1} ${DOCKER_USER}/${image}:${CIRCLE_BRANCH}-${TAGSUFFIX}
              docker push ${DOCKER_USER}/${image}:${CIRCLE_BRANCH}-${TAGSUFFIX}
          done


jobs:
  build-NSEs:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Clone networkservicemesh
          working_directory: /go/src/github.com/networkservicemesh
          command: |
            git clone https://github.com/tiswanso/networkservicemesh.git
            cd networkservicemesh
            git checkout v0.2.0-vl3
      - run:
          name: Build vL3 docker image
          working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
          command: |
            ORG=tiswanso TAG=${CIRCLE_SHA1} make docker-vl3
      - run:
          name: Build ucnf-kiknos docker image
          working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
          command: |
            ORG=tiswanso TAG=${CIRCLE_SHA1} make docker-ucnf-kiknos-vppagent-build 
      - run:
          name: Save docker images
          working_directory: /go/src/github.com/cisco-app-networking/nsm-nse
          command: |
            images_to_save+=("tiswanso/vl3_ucnf-nse:${CIRCLE_SHA1}" "tiswanso/ucnf-kiknos-vppagent:${CIRCLE_SHA1}")
            mkdir -p _save
            docker save "${images_to_save[@]}" >_save/images.tar
      - persist_to_workspace:
          root: _save
          paths:
          - images.tar

  sanity-check:
    working_directory: ~/project/nsm-nse
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run:
          name: Install golangci-lint
          command: |
            export GOLANGCI_LINT_VER=1.20.1
            wget https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_LINT_VER}/golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            tar -xvf golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            sudo mv golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64/golangci-lint /usr/local/bin/
      - run:
          name: Lint examples
          command: |
            make lint-all
    environment:
      GO111MODULE: "on"

  build:
    working_directory: ~/project/nsm-nse
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make build-all

  push:
    parameters:
      example:
        type: string
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/nsm-nse
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push << parameters.example >> containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make k8s-<< parameters.example >>-push

  push-all:
    parameters:
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/nsm-nse
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push all containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make push-all

  test:
    parameters:
      example:
        type: string
      description:
        type: string
      nsmbranch:
        type: string
        default: "master"
      nightly:
        type: string
        default: "false"
    machine:
      enabled: true
      docker_layer_caching: true
    working_directory: ~/project/nsm-nse
    steps:
      - run:
          name: Update go to 1.14
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.14.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.14.linux-amd64.tar.gz
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Install kind
          command: |
            GO111MODULE="on" go get sigs.k8s.io/kind@master
            kind version
      - checkout
      - run:
          name: Patch go.mod
          command: |
            if [ "<< parameters.nightly >>" == "true" ]; then
               ./scripts/update_networkservicemesh.sh master # Update to the master branch
            fi
      - run:
          name: Clone NSM
          command: |
            git clone --single-branch --branch << parameters.nsmbranch >> https://github.com/networkservicemesh/networkservicemesh.git ../networkservicemesh
      - run:
          name: Start kind
          command: |
            make kind-start
            kubectl config use-context kind-nsm
      - run:
          name: Wait for kind to settle
          command: |
            kubectl wait -n kube-system --timeout=150s --for condition=Ready --all pods
      - helm/install-helm-client
      - helm/install-helm-on-cluster:
          enable-cluster-wide-admin-access: true
      - helm/install-helm-chart:
          chart: "../networkservicemesh/deployments/helm/nsm"
          values-to-override: |
            "org=networkservicemesh,tag=<< parameters.nsmbranch >>,admission-webhook.org=networkservicemesh,admission-webhook.tag=<< parameters.nsmbranch >>,spire.enabled=false,insecure=true"
      - run:
          name: Build << parameters.example >> images
          command: |
            make k8s-<< parameters.example >>-save
      - run:
          name: << parameters.description >> deploy
          command: |
            make k8s-<< parameters.example >>-load-images k8s-<< parameters.example >>-deploy
            kubectl wait -n default --timeout=150s --for condition=Ready --all pods
      - run:
          name: << parameters.description >> check
          command: |
            make k8s-<< parameters.example >>-check
      - run:
          name: << parameters.description >> delete
          command: |
            make k8s-<< parameters.example >>-delete
      - run:
          name: Dump cluster state
          when: always
          command: |
            kubectl get nodes --all-namespaces
            kubectl get pods -o wide --all-namespaces
            kubectl describe pods --all-namespaces

  e2e-kind-integration:
    <<: *defaults
    <<: *e2e-kind-test

  e2e-kiknos-integration:
    <<: *defaults-machine
    <<: *e2e-kind-kiknos-test

  publish-NSEs:
    <<: *defaults
    <<: *publish-steps


orbs:
  helm: circleci/helm@0.2.1
workflows:
  version: 2
  test-and-push:
    jobs:
      - build-NSEs
      - e2e-kind-integration:
          requires:
            - build-NSEs
      - e2e-kiknos-integration:
          requires:
            - build-NSEs
      - publish-NSEs:
          context: nse-publish
          requires:
            - build-NSEs
          filters:
            branches:
              only:
                - /vl3_.*/

