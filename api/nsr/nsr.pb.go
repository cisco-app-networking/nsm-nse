// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nsr.proto

package nsr

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NseRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	NetworkService       string   `protobuf:"bytes,2,opt,name=networkService,proto3" json:"networkService,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NseRequest) Reset()         { *m = NseRequest{} }
func (m *NseRequest) String() string { return proto.CompactTextString(m) }
func (*NseRequest) ProtoMessage()    {}
func (*NseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db324d488ab231dc, []int{0}
}

func (m *NseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NseRequest.Unmarshal(m, b)
}
func (m *NseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NseRequest.Marshal(b, m, deterministic)
}
func (m *NseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NseRequest.Merge(m, src)
}
func (m *NseRequest) XXX_Size() int {
	return xxx_messageInfo_NseRequest.Size(m)
}
func (m *NseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NseRequest proto.InternalMessageInfo

func (m *NseRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NseRequest) GetNetworkService() string {
	if m != nil {
		return m.NetworkService
	}
	return ""
}

type NsrResponse struct {
	Nses                 []*Nse   `protobuf:"bytes,1,rep,name=nses,proto3" json:"nses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NsrResponse) Reset()         { *m = NsrResponse{} }
func (m *NsrResponse) String() string { return proto.CompactTextString(m) }
func (*NsrResponse) ProtoMessage()    {}
func (*NsrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db324d488ab231dc, []int{1}
}

func (m *NsrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NsrResponse.Unmarshal(m, b)
}
func (m *NsrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NsrResponse.Marshal(b, m, deterministic)
}
func (m *NsrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NsrResponse.Merge(m, src)
}
func (m *NsrResponse) XXX_Size() int {
	return xxx_messageInfo_NsrResponse.Size(m)
}
func (m *NsrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NsrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NsrResponse proto.InternalMessageInfo

func (m *NsrResponse) GetNses() []*Nse {
	if m != nil {
		return m.Nses
	}
	return nil
}

type Nse struct {
	Name                      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NetworkServiceName        string            `protobuf:"bytes,2,opt,name=networkServiceName,proto3" json:"networkServiceName,omitempty"`
	NetworkServiceManagerName string            `protobuf:"bytes,3,opt,name=networkServiceManagerName,proto3" json:"networkServiceManagerName,omitempty"`
	Labels                    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State                     string            `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}          `json:"-"`
	XXX_unrecognized          []byte            `json:"-"`
	XXX_sizecache             int32             `json:"-"`
}

func (m *Nse) Reset()         { *m = Nse{} }
func (m *Nse) String() string { return proto.CompactTextString(m) }
func (*Nse) ProtoMessage()    {}
func (*Nse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db324d488ab231dc, []int{2}
}

func (m *Nse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nse.Unmarshal(m, b)
}
func (m *Nse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nse.Marshal(b, m, deterministic)
}
func (m *Nse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nse.Merge(m, src)
}
func (m *Nse) XXX_Size() int {
	return xxx_messageInfo_Nse.Size(m)
}
func (m *Nse) XXX_DiscardUnknown() {
	xxx_messageInfo_Nse.DiscardUnknown(m)
}

var xxx_messageInfo_Nse proto.InternalMessageInfo

func (m *Nse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Nse) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

func (m *Nse) GetNetworkServiceManagerName() string {
	if m != nil {
		return m.NetworkServiceManagerName
	}
	return ""
}

func (m *Nse) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Nse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*NseRequest)(nil), "svreg.NseRequest")
	proto.RegisterType((*NsrResponse)(nil), "svreg.NsrResponse")
	proto.RegisterType((*Nse)(nil), "svreg.Nse")
	proto.RegisterMapType((map[string]string)(nil), "svreg.Nse.LabelsEntry")
}

func init() { proto.RegisterFile("nsr.proto", fileDescriptor_db324d488ab231dc) }

var fileDescriptor_db324d488ab231dc = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x3d, 0x4f, 0xc3, 0x40,
	0x0c, 0x25, 0x5f, 0xad, 0xea, 0x48, 0x08, 0x2c, 0x84, 0x42, 0x07, 0x84, 0x32, 0xa0, 0x2e, 0xdc,
	0x10, 0x16, 0x40, 0x0c, 0x08, 0x09, 0xb1, 0xc0, 0x0d, 0x61, 0x63, 0xbb, 0x52, 0xab, 0x42, 0x0d,
	0x97, 0x72, 0xbe, 0x06, 0xf5, 0x1f, 0xf0, 0xb3, 0xd1, 0x5d, 0xd2, 0xd2, 0x22, 0xba, 0xd9, 0xcf,
	0xcf, 0x7e, 0xb6, 0x1f, 0x0c, 0x34, 0x1b, 0x31, 0x37, 0xb5, 0xad, 0x31, 0xe1, 0xc6, 0xd0, 0x34,
	0x97, 0x00, 0x92, 0xa9, 0xa4, 0xcf, 0x05, 0xb1, 0xc5, 0x0c, 0xfa, 0x6a, 0x32, 0x31, 0xc4, 0x9c,
	0x05, 0x67, 0xc1, 0x68, 0x50, 0xae, 0x52, 0x3c, 0x87, 0x7d, 0x4d, 0xf6, 0xab, 0x36, 0xb3, 0x17,
	0x32, 0xcd, 0xfb, 0x1b, 0x65, 0xa1, 0x27, 0xfc, 0x41, 0xf3, 0x0b, 0x48, 0x25, 0x9b, 0x92, 0x78,
	0x5e, 0x6b, 0x26, 0x3c, 0x85, 0x58, 0x33, 0xb9, 0x69, 0xd1, 0x28, 0x2d, 0x40, 0x78, 0x51, 0xe1,
	0x14, 0x3d, 0x9e, 0x7f, 0x87, 0x10, 0x49, 0x26, 0x44, 0x88, 0xb5, 0xfa, 0xa0, 0x4e, 0xd5, 0xc7,
	0x28, 0x00, 0xb7, 0x87, 0x4b, 0xc7, 0x68, 0x65, 0xff, 0xa9, 0xe0, 0x2d, 0x9c, 0x6c, 0xa3, 0xcf,
	0x4a, 0xab, 0x29, 0x19, 0xdf, 0x16, 0xf9, 0xb6, 0xdd, 0x04, 0x14, 0xd0, 0xab, 0xd4, 0x98, 0x2a,
	0xce, 0x62, 0xbf, 0xeb, 0xf1, 0xef, 0xae, 0xe2, 0xc9, 0x17, 0x1e, 0xb4, 0x35, 0xcb, 0xb2, 0x63,
	0xe1, 0x11, 0x24, 0x6c, 0x95, 0xa5, 0x2c, 0xf1, 0x93, 0xdb, 0x64, 0x78, 0x0d, 0xe9, 0x06, 0x19,
	0x0f, 0x20, 0x9a, 0xd1, 0xb2, 0xbb, 0xca, 0x85, 0xae, 0xad, 0x51, 0xd5, 0x62, 0x75, 0x47, 0x9b,
	0xdc, 0x84, 0x57, 0x41, 0x71, 0xe7, 0x9c, 0x30, 0xdd, 0x66, 0x58, 0x40, 0xff, 0x91, 0xac, 0x64,
	0x62, 0x3c, 0xdc, 0xf8, 0x5a, 0xeb, 0xd3, 0x10, 0xd7, 0xd0, 0xfa, 0xd5, 0xf9, 0xde, 0x7d, 0xf2,
	0x1a, 0x69, 0x36, 0xe3, 0x9e, 0x37, 0xf8, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x50, 0x1d, 0x75,
	0x29, 0xed, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NsrServiceClient is the client API for NsrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NsrServiceClient interface {
	GetNses(ctx context.Context, in *NseRequest, opts ...grpc.CallOption) (*NsrResponse, error)
}

type nsrServiceClient struct {
	cc *grpc.ClientConn
}

func NewNsrServiceClient(cc *grpc.ClientConn) NsrServiceClient {
	return &nsrServiceClient{cc}
}

func (c *nsrServiceClient) GetNses(ctx context.Context, in *NseRequest, opts ...grpc.CallOption) (*NsrResponse, error) {
	out := new(NsrResponse)
	err := c.cc.Invoke(ctx, "/svreg.NsrService/GetNses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsrServiceServer is the server API for NsrService service.
type NsrServiceServer interface {
	GetNses(context.Context, *NseRequest) (*NsrResponse, error)
}

// UnimplementedNsrServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNsrServiceServer struct {
}

func (*UnimplementedNsrServiceServer) GetNses(ctx context.Context, req *NseRequest) (*NsrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNses not implemented")
}

func RegisterNsrServiceServer(s *grpc.Server, srv NsrServiceServer) {
	s.RegisterService(&_NsrService_serviceDesc, srv)
}

func _NsrService_GetNses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsrServiceServer).GetNses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svreg.NsrService/GetNses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsrServiceServer).GetNses(ctx, req.(*NseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svreg.NsrService",
	HandlerType: (*NsrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNses",
			Handler:    _NsrService_GetNses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nsr.proto",
}
