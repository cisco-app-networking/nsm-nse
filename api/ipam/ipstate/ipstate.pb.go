// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipstate.proto

package ipstate

import (
	context "context"
	fmt "fmt"
	ipprovider "github.com/cisco-app-networking/nsm-nse/api/ipam/ipprovider"
	ipreceiver "github.com/cisco-app-networking/nsm-nse/api/ipam/ipreceiver"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubnetsState struct {
	Subnet               []*ipprovider.Subnet `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SubnetsState) Reset()         { *m = SubnetsState{} }
func (m *SubnetsState) String() string { return proto.CompactTextString(m) }
func (*SubnetsState) ProtoMessage()    {}
func (*SubnetsState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c757518148bec6, []int{0}
}

func (m *SubnetsState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetsState.Unmarshal(m, b)
}
func (m *SubnetsState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetsState.Marshal(b, m, deterministic)
}
func (m *SubnetsState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetsState.Merge(m, src)
}
func (m *SubnetsState) XXX_Size() int {
	return xxx_messageInfo_SubnetsState.Size(m)
}
func (m *SubnetsState) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetsState.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetsState proto.InternalMessageInfo

func (m *SubnetsState) GetSubnet() []*ipprovider.Subnet {
	if m != nil {
		return m.Subnet
	}
	return nil
}

type IpRangesState struct {
	Range                []*ipreceiver.IpRange `protobuf:"bytes,1,rep,name=range,proto3" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IpRangesState) Reset()         { *m = IpRangesState{} }
func (m *IpRangesState) String() string { return proto.CompactTextString(m) }
func (*IpRangesState) ProtoMessage()    {}
func (*IpRangesState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c757518148bec6, []int{1}
}

func (m *IpRangesState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRangesState.Unmarshal(m, b)
}
func (m *IpRangesState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRangesState.Marshal(b, m, deterministic)
}
func (m *IpRangesState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRangesState.Merge(m, src)
}
func (m *IpRangesState) XXX_Size() int {
	return xxx_messageInfo_IpRangesState.Size(m)
}
func (m *IpRangesState) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRangesState.DiscardUnknown(m)
}

var xxx_messageInfo_IpRangesState proto.InternalMessageInfo

func (m *IpRangesState) GetRange() []*ipreceiver.IpRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type PrefixIdentifier struct {
	Fqdn                 string               `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	AddrFamily           *ipprovider.IpFamily `protobuf:"bytes,2,opt,name=addr_family,json=addrFamily,proto3" json:"addr_family,omitempty"`
	ConnectivityDomain   string               `protobuf:"bytes,3,opt,name=connectivity_domain,json=connectivityDomain,proto3" json:"connectivity_domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PrefixIdentifier) Reset()         { *m = PrefixIdentifier{} }
func (m *PrefixIdentifier) String() string { return proto.CompactTextString(m) }
func (*PrefixIdentifier) ProtoMessage()    {}
func (*PrefixIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c757518148bec6, []int{2}
}

func (m *PrefixIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrefixIdentifier.Unmarshal(m, b)
}
func (m *PrefixIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrefixIdentifier.Marshal(b, m, deterministic)
}
func (m *PrefixIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixIdentifier.Merge(m, src)
}
func (m *PrefixIdentifier) XXX_Size() int {
	return xxx_messageInfo_PrefixIdentifier.Size(m)
}
func (m *PrefixIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixIdentifier proto.InternalMessageInfo

func (m *PrefixIdentifier) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *PrefixIdentifier) GetAddrFamily() *ipprovider.IpFamily {
	if m != nil {
		return m.AddrFamily
	}
	return nil
}

func (m *PrefixIdentifier) GetConnectivityDomain() string {
	if m != nil {
		return m.ConnectivityDomain
	}
	return ""
}

func init() {
	proto.RegisterType((*SubnetsState)(nil), "ippool.SubnetsState")
	proto.RegisterType((*IpRangesState)(nil), "ippool.IpRangesState")
	proto.RegisterType((*PrefixIdentifier)(nil), "ippool.PrefixIdentifier")
}

func init() { proto.RegisterFile("ipstate.proto", fileDescriptor_b9c757518148bec6) }

var fileDescriptor_b9c757518148bec6 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x4f, 0xc2, 0x30,
	0x14, 0xc7, 0x9d, 0x28, 0x86, 0x22, 0x4a, 0x8a, 0x24, 0x0b, 0x27, 0xb2, 0x44, 0xc3, 0x85, 0x2d,
	0x62, 0xc2, 0x5d, 0x63, 0x24, 0x4b, 0x3c, 0x98, 0x71, 0xf3, 0x42, 0xca, 0xf6, 0x36, 0x5f, 0xdc,
	0xda, 0xda, 0x15, 0x94, 0xaf, 0xe0, 0x37, 0xf1, 0x5b, 0x1a, 0xda, 0x2d, 0x22, 0x07, 0x0f, 0xde,
	0xfe, 0x6f, 0xff, 0xf7, 0x7e, 0xeb, 0xfb, 0xb7, 0xa4, 0x83, 0xb2, 0xd4, 0x4c, 0x83, 0x2f, 0x95,
	0xd0, 0x82, 0x36, 0x51, 0x4a, 0x21, 0xf2, 0xc1, 0x63, 0x86, 0xfa, 0x65, 0xb5, 0xf4, 0x63, 0x51,
	0x04, 0x31, 0x96, 0xb1, 0x18, 0x33, 0x29, 0xc7, 0x1c, 0xf4, 0xbb, 0x50, 0xaf, 0xc8, 0xb3, 0x80,
	0x97, 0xc5, 0x98, 0x97, 0x10, 0x30, 0x89, 0x01, 0x4a, 0x56, 0x04, 0x28, 0xa5, 0x12, 0x6b, 0x4c,
	0x40, 0xed, 0x48, 0x4b, 0xfd, 0x17, 0x4d, 0x41, 0x0c, 0xb8, 0x36, 0xb4, 0x5a, 0x5a, 0x9a, 0x37,
	0x25, 0xa7, 0xf3, 0xd5, 0x92, 0x83, 0x2e, 0xe7, 0xdb, 0x93, 0xd3, 0x2b, 0xd2, 0x2c, 0x4d, 0xed,
	0x3a, 0xc3, 0xc6, 0xa8, 0x3d, 0x39, 0xf3, 0xed, 0x12, 0xbe, 0xed, 0x8a, 0x2a, 0xd7, 0x9b, 0x92,
	0x4e, 0x28, 0x23, 0xc6, 0x33, 0xa8, 0x06, 0x2f, 0xc9, 0xb1, 0xda, 0x96, 0xd5, 0xdc, 0x79, 0x3d,
	0x57, 0x75, 0x45, 0xd6, 0xf5, 0x3e, 0x1d, 0xd2, 0x7d, 0x52, 0x90, 0xe2, 0x47, 0x98, 0x00, 0xd7,
	0x98, 0x22, 0x28, 0x4a, 0xc9, 0x51, 0xfa, 0x96, 0x70, 0xd7, 0x19, 0x3a, 0xa3, 0x56, 0x64, 0x34,
	0xbd, 0x26, 0x6d, 0x96, 0x24, 0x6a, 0x91, 0xb2, 0x02, 0xf3, 0x8d, 0x7b, 0x38, 0x74, 0x46, 0xed,
	0x49, 0xf7, 0x87, 0xfa, 0x60, 0xbe, 0x47, 0x64, 0xdb, 0x64, 0x35, 0x0d, 0x48, 0x2f, 0x16, 0x9c,
	0x43, 0xac, 0x71, 0x8d, 0x7a, 0xb3, 0x48, 0x44, 0xc1, 0x90, 0xbb, 0x0d, 0x43, 0xa5, 0xbb, 0xd6,
	0xbd, 0x71, 0x26, 0x5f, 0x0e, 0xe9, 0x87, 0x92, 0x15, 0x66, 0x83, 0x90, 0x6b, 0x50, 0x4a, 0x64,
	0x4c, 0x0b, 0x45, 0x67, 0xa4, 0x37, 0x03, 0x7d, 0x9b, 0xe7, 0x22, 0x66, 0x1a, 0x92, 0x2a, 0x22,
	0xea, 0xd6, 0xff, 0xdf, 0x5f, 0x61, 0x70, 0xf1, 0x3b, 0x27, 0x1b, 0x8a, 0x77, 0x40, 0x67, 0x84,
	0xee, 0x82, 0x6c, 0x62, 0x7f, 0x70, 0xfa, 0x7b, 0xb9, 0xd5, 0xa0, 0xbb, 0xd6, 0xf3, 0x49, 0xf5,
	0xba, 0x96, 0x4d, 0x73, 0x75, 0x37, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x5f, 0x9c, 0x04,
	0x6f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IpamStateInterrogatorClient is the client API for IpamStateInterrogator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IpamStateInterrogatorClient interface {
	GetAllocatedSubnets(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*SubnetsState, error)
	GetAllocatedRanges(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*IpRangesState, error)
}

type ipamStateInterrogatorClient struct {
	cc *grpc.ClientConn
}

func NewIpamStateInterrogatorClient(cc *grpc.ClientConn) IpamStateInterrogatorClient {
	return &ipamStateInterrogatorClient{cc}
}

func (c *ipamStateInterrogatorClient) GetAllocatedSubnets(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*SubnetsState, error) {
	out := new(SubnetsState)
	err := c.cc.Invoke(ctx, "/ippool.IpamStateInterrogator/GetAllocatedSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamStateInterrogatorClient) GetAllocatedRanges(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*IpRangesState, error) {
	out := new(IpRangesState)
	err := c.cc.Invoke(ctx, "/ippool.IpamStateInterrogator/GetAllocatedRanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpamStateInterrogatorServer is the server API for IpamStateInterrogator service.
type IpamStateInterrogatorServer interface {
	GetAllocatedSubnets(context.Context, *PrefixIdentifier) (*SubnetsState, error)
	GetAllocatedRanges(context.Context, *PrefixIdentifier) (*IpRangesState, error)
}

// UnimplementedIpamStateInterrogatorServer can be embedded to have forward compatible implementations.
type UnimplementedIpamStateInterrogatorServer struct {
}

func (*UnimplementedIpamStateInterrogatorServer) GetAllocatedSubnets(ctx context.Context, req *PrefixIdentifier) (*SubnetsState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedSubnets not implemented")
}
func (*UnimplementedIpamStateInterrogatorServer) GetAllocatedRanges(ctx context.Context, req *PrefixIdentifier) (*IpRangesState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedRanges not implemented")
}

func RegisterIpamStateInterrogatorServer(s *grpc.Server, srv IpamStateInterrogatorServer) {
	s.RegisterService(&_IpamStateInterrogator_serviceDesc, srv)
}

func _IpamStateInterrogator_GetAllocatedSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamStateInterrogatorServer).GetAllocatedSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.IpamStateInterrogator/GetAllocatedSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamStateInterrogatorServer).GetAllocatedSubnets(ctx, req.(*PrefixIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamStateInterrogator_GetAllocatedRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamStateInterrogatorServer).GetAllocatedRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.IpamStateInterrogator/GetAllocatedRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamStateInterrogatorServer).GetAllocatedRanges(ctx, req.(*PrefixIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _IpamStateInterrogator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ippool.IpamStateInterrogator",
	HandlerType: (*IpamStateInterrogatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllocatedSubnets",
			Handler:    _IpamStateInterrogator_GetAllocatedSubnets_Handler,
		},
		{
			MethodName: "GetAllocatedRanges",
			Handler:    _IpamStateInterrogator_GetAllocatedRanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipstate.proto",
}
